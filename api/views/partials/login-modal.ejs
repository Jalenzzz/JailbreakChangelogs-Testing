<!-- Login Modal -->
<div class="modal fade" id="loginModal" tabindex="-1" aria-labelledby="loginModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-body">
        <div class="auth-toggle mb-4">
          <button class="auth-toggle-btn active" data-tab="discord">Discord</button>
          <button class="auth-toggle-btn" data-tab="roblox">Roblox</button>
        </div>
        
        <!-- Discord Tab Content -->
        <div class="tab-content" id="discord-tab">
          <div class="text-center mb-4">
            <img src="/assets/logos/logos--discord.webp" alt="Discord Logo" width="160" height="32" class="mb-3">
            <p class="mb-0">Jailbreak Changelogs connects with Discord to build your user profile. We only collect your publicly available Discord details. To use our trading features, you'll need to link your Roblox account after signing in. Your data security is important to us - there's no need to provide a password. </p>
          </div>
          <div class="d-grid gap-2">
            <a href="#" class="btn btn-primary btn-lg" id="discordLoginBtn">
              Continue with Discord
            </a>
          </div>
        </div>

        <!-- Roblox Tab Content -->
        <div class="tab-content d-none" id="roblox-tab">
          <div class="text-center mb-4">
            <img src="/assets/logos/Roblox_Logo.webp" alt="Roblox Logo" width="140" height="32" class="mb-3">
            <p class="mb-0">Jailbreak Changelogs connects with Roblox to build your user profile. We only collect your publicly available Roblox details to enhance your trading experience. Your data security is important to us - there's no need to provide a password. </p>
          </div>
          <div class="d-grid gap-2">
            <button class="btn btn-primary btn-lg" id="robloxLoginBtn">
              Continue with Roblox
            </button>
          </div>
        </div>
      </div>
      <div class="modal-footer">
        <p class="text-muted small mb-0">By continuing, you agree to our <a href="/tos" class="text-decoration-none">Terms of Service</a> and <a href="/privacy" class="text-decoration-none">Privacy Policy</a></p>
      </div>
    </div>
  </div>
</div>

<style>
  #loginModal .modal-content {
    background-color: var(--bg-primary);
    border: 1px solid var(--accent-color);
    border-radius: 12px;
  }

  #loginModal .modal-body {
    padding: 2rem;
  }

  #loginModal .btn-primary {
    background-color: var(--accent-color);
    border: none;
    padding: 0.75rem 1.5rem;
    font-weight: 500;
    color: white !important;
  }

  #loginModal .modal-footer {
    border-top: 1px solid var(--accent-color);
    padding: 1rem 1.5rem;
  }

  #loginModal .text-muted {
    color: var(--text-secondary) !important;
  }

  #loginModal .auth-toggle {
    display: flex;
    width: 100%;
    margin-bottom: 20px;
    border-radius: 8px;
    overflow: hidden;
  }

  #loginModal .auth-toggle-btn {
    flex: 1;
    padding: 12px;
    border: none;
    background: rgba(46, 57, 68, 0.5);
    color: #d3d9d4;
    font-size: 16px;
    cursor: pointer;
    transition: background-color 0.3s;
  }

  #loginModal .auth-toggle-btn.active {
    background: #124e66;
  }

  #loginModal .auth-toggle-btn:not(.active) {
    background: var(--bg-secondary);
  }

  #loginModal .auth-toggle-btn:hover:not(.active) {
    background: var(--active-bg);
  }

  #loginModal .consent-checkboxes {
    margin: 20px auto;
    max-width: 400px;
  }

  #loginModal .consent-checkboxes .form-check {
    margin-bottom: 10px;
    text-align: left;
    color: var(--text-primary);
  }

  #loginModal .consent-checkboxes .form-check-input {
    background-color: transparent;
  }

  #loginModal .consent-checkboxes .form-check-input:checked {
    background-color: var(--accent-color);
    border-color: var(--accent-color);
  }

  #loginModal .consent-checkboxes .form-check-label a {
    color: var(--text-muted);
    text-decoration: none;
  }

  #loginModal .consent-checkboxes .form-check-label a:hover {
    color: var(--text-primary);
    text-decoration: underline;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', async function() {
    // Check for token in URL and set cookie if present
    const urlParams = new URLSearchParams(window.location.search);
    const token = urlParams.get('token');
    const showLoginModal = urlParams.get('showLoginModal');
    const redirectUrl = urlParams.get('redirect');
    
    if (showLoginModal === 'true') {
      const loginModal = new bootstrap.Modal(document.getElementById('loginModal'));
      loginModal.show();
      
      // Store the redirect URL if present
      if (redirectUrl) {
        localStorage.setItem('redirectAfterLogin', redirectUrl);
      }
    }

    if (token) {
      // Set cookie with 7 day expiration
      const date = new Date();
      date.setTime(date.getTime() + (7 * 24 * 60 * 60 * 1000));
      document.cookie = `token=${token}; expires=${date.toUTCString()}; path=/`;
      
      // Fetch user data before refreshing
      try {
        const response = await fetch(`https://api.jailbreakchangelogs.xyz/users/get/token?token=${token}`);
        if (response.ok) {
          const userData = await response.json();
          if (userData) {
            localStorage.setItem("user", JSON.stringify(userData));
            localStorage.setItem("userid", userData.id);
            
            // Check for stored redirect URL
            const storedRedirectUrl = localStorage.getItem('redirectAfterLogin');
            if (storedRedirectUrl) {
              localStorage.removeItem('redirectAfterLogin');
              window.location.href = storedRedirectUrl;
              return;
            }
          }
        }
      } catch (error) {
        console.error("Error fetching user data:", error);
      }
      
      // If no redirect URL is stored, just remove token and showLoginModal from URL
      const newUrl = window.location.pathname + window.location.search
        .replace(/[?&]token=[^&]+(&|$)/, '')
        .replace(/[?&]showLoginModal=true(&|$)/, '')
        .replace(/[?&]redirect=[^&]+(&|$)/, '');
      window.location.href = newUrl;
    }

    // Tab switching functionality
    const tabButtons = document.querySelectorAll('.auth-toggle-btn');
    const tabContents = document.querySelectorAll('.tab-content');

    tabButtons.forEach(button => {
      button.addEventListener('click', () => {
        const tabId = button.getAttribute('data-tab');
        // Remove active class from all buttons and contents
        tabButtons.forEach(btn => btn.classList.remove('active'));
        tabContents.forEach(content => content.classList.add('d-none'));
        
        // Add active class to clicked button and show corresponding content
        button.classList.add('active');
        document.getElementById(`${tabId}-tab`).classList.remove('d-none');
      });
    });

    // Discord login button
    const discordLoginBtn = document.getElementById('discordLoginBtn');
    if (discordLoginBtn) {
      discordLoginBtn.addEventListener('click', function(e) {
        e.preventDefault();
        // Store current URL for redirect after login
        const currentURL = window.location.pathname + window.location.search;
        localStorage.setItem('redirectAfterLogin', currentURL);
        
        const oauthRedirect = `https://api.testing.jailbreakchangelogs.xyz/oauth?redirect=${encodeURIComponent(window.location.origin + currentURL)}`;
        window.location.href = oauthRedirect;
      });
    }

    // Roblox login button
    const robloxLoginBtn = document.getElementById('robloxLoginBtn');
    if (robloxLoginBtn) {
      robloxLoginBtn.addEventListener('click', function(e) {
        e.preventDefault();
        // Check if user has Discord token
        if (!getCookie('token')) {
          notyf.error("You need to connect your Discord account first before linking your Roblox account.");
          return;
        }
        
        // Store current URL for redirect after login
        const currentURL = window.location.pathname + window.location.search;
        localStorage.setItem('redirectAfterLogin', currentURL);
        
        const userToken = getCookie('token');
        const oauthRedirect = `https://api.testing.jailbreakchangelogs.xyz/oauth/roblox?redirect=${encodeURIComponent(window.location.origin + currentURL)}&owner=${userToken}`;
        window.location.href = oauthRedirect;
      });
    }
  });
</script> 