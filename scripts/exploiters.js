// Load exploiters list
async function loadExploiters() {
  try {
    const response = await fetch(
      "https://api3.jailbreakchangelogs.xyz/exploiters/list?nocache=true"
    );
    const data = await response.json();
    const itemsPerPage = 9;
    const currentPage =
      parseInt(new URLSearchParams(window.location.search).get("page")) || 1;
    const start = (currentPage - 1) * itemsPerPage;
    const end = start + itemsPerPage;
    const paginatedData = data.slice(start, end);
    const totalPages = Math.ceil(data.length / itemsPerPage);

    const exploiterList = document.getElementById("exploiterList");
    document.getElementById("loading").remove();

    // total count display
    document.querySelector(
      ".total-count"
    ).textContent = `Total Exploiters (${data.length})`;

    if (data.length === 0) {
      exploiterList.innerHTML = `
        <div class="col-12">
          <div class="empty-state">
            <svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 24 24">
              <path fill="currentColor" d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10s10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z"/>
            </svg>
            <h3>No Exploiters Reported</h3>
            <p>There are currently no confirmed exploiter reports. Help keep the community safe by reporting any exploiters you encounter.</p>
          </div>
        </div>`;
      return;
    }

    exploiterList.innerHTML = paginatedData
      .map(
        (exploiter) => `
        <div class="col-md-6 col-lg-4">
          <div class="card h-100">
            <div class="card-body">
              <h5 class="card-title">
                Username: <a href="https://www.roblox.com/search/users?keyword=${encodeURIComponent(
                  exploiter.name
                )}" 
                   target="_blank" 
                   rel="noopener noreferrer"
                   class="exploiter-name">
                  ${escapeHtml(exploiter.name)}
                </a>
              </h5>
              <div class="video-container">
                <iframe
                  src="${getEmbedUrl(exploiter.proof)}"
                  frameborder="0"
                  allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                  allowfullscreen
                ></iframe>
              </div>
              <p class="card-text text-muted mt-2">
                ${formatDate(exploiter.created_at)}
              </p>
            </div>
          </div>
        </div>
      `
      )
      .join("");

    // Add pagination controls
    if (totalPages > 1) {
      exploiterList.insertAdjacentHTML(
        "afterend",
        `
        <div class="pagination-controls mt-4 d-flex justify-content-center">
          ${Array.from({ length: totalPages }, (_, i) => i + 1)
            .map(
              (page) => `
              <a href="?page=${page}" 
                 class="pagination-btn ${page === currentPage ? "active" : ""}">
                ${page}
              </a>
            `
            )
            .join("")}
        </div>
      `
      );
    }
  } catch (error) {
    console.error("Error loading exploiters:", error);
    notyf.error("Failed to load exploiters list");
  }
}

// Helper function to format date
function formatDate(timestamp) {
  const date = new Date(timestamp * 1000);
  return `Reported on: ${date.toLocaleDateString("en-US", {
    month: "long",
    day: "numeric",
    year: "numeric",
  })}, ${date.toLocaleTimeString("en-US")}`;
}

// Convert YouTube URL to embed URL
function getEmbedUrl(url) {
  try {
    // Handle youtu.be URLs
    const shortMatch = url.match(/^https?:\/\/youtu\.be\/([-\w]{11})(\?.*)?$/);
    if (shortMatch) {
      return `https://www.youtube.com/embed/${shortMatch[1]}`;
    }

    // Handle regular youtube.com URLs
    const longMatch = url.match(
      /^https?:\/\/(www\.|m\.)?youtube\.com\/watch\?v=([-\w]{11})(&.*)?$/
    );
    if (longMatch) {
      return `https://www.youtube.com/embed/${longMatch[2]}`;
    }

    return "";
  } catch {
    return "";
  }
}

// Escape HTML to prevent XSS
function escapeHtml(unsafe) {
  return unsafe
    .replace(/&/g, "&amp;")
    .replace(/</g, "&lt;")
    .replace(/>/g, "&gt;")
    .replace(/"/g, "&quot;")
    .replace(/'/g, "&#039;");
}

// Check auth and show modal
function checkAuthAndShowModal() {
  const token = getCookie("token");
  if (!token) {
    notyf.error("Please log in to report exploiters");
    return;
  }
  const modal = new bootstrap.Modal(
    document.getElementById("addExploiterModal")
  );
  modal.show();
}

// Handle form submission
async function handleAddExploiter(event) {
  event.preventDefault();

  const form = event.target;
  const proofLink = form.querySelector("#proofLink").value;

  // Validate YouTube URL before proceeding
  const youtubePattern =
    /^https?:\/\/(www\.|m\.)?youtube\.com\/watch\?v=[-\w]{11}(&.*)?$|^https?:\/\/youtu\.be\/[-\w]{11}(\?.*)?$/;
  if (!youtubePattern.test(proofLink)) {
    notyf.error("Please enter a valid YouTube video URL");
    return;
  }

  const submitBtn = form.querySelector('button[type="submit"]');
  const spinner = submitBtn.querySelector(".spinner-border");

  // Show loading state
  submitBtn.disabled = true;
  spinner.classList.remove("d-none");

  try {
    const token = getCookie("token");
    if (!token) {
      throw new Error("Not authenticated");
    }

    const formData = new FormData(form);
    const data = {
      name: formData.get("name"),
      proof: formData.get("proof"),
      owner: token,
    };

    const response = await fetch(
      "https://api3.jailbreakchangelogs.xyz/exploiters/add",
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(data),
      }
    );

    if (!response.ok) {
      throw new Error("Failed to submit report");
    }

    // Close modal and reload list
    const modal = bootstrap.Modal.getInstance(
      document.getElementById("addExploiterModal")
    );
    modal.hide();
    form.reset();
    notyf.success("Exploiter report submitted successfully");
    loadExploiters();
  } catch (error) {
    console.error("Error submitting report:", error);
    notyf.error(error.message || "Failed to submit report");
  } finally {
    // Reset loading state
    submitBtn.disabled = false;
    spinner.classList.add("d-none");
  }
}

// Clear modal fields on page load
document.addEventListener("DOMContentLoaded", () => {
  loadExploiters();
  document.getElementById("addExploiterForm").reset();
});
